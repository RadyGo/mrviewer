// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "mrvIccProfileUI.h"
#include <algorithm>
#include "SampleICC/IccProfile.h"
#include "SampleICC/IccUtil.h"
#include "core/mrvColorProfile.h"
#include "mrViewer.h"
using namespace mrv;

inline void ICCProfileUI::cb_uiTags_i(fltk::Browser*, ICCProfileUI* v) {
  v->fill_text();
}
void ICCProfileUI::cb_uiTags(fltk::Browser* o, ICCProfileUI* v) {
  ((ICCProfileUI*)(o->parent()->parent()->parent()->user_data()))->cb_uiTags_i(o,v);
}

inline void ICCProfileListUI::cb_Info_i(fltk::Button*, ICCProfileListUI* v) {
  v->show_info();
}
void ICCProfileListUI::cb_Info(fltk::Button* o, ICCProfileListUI* v) {
  ((ICCProfileListUI*)(o->parent()->parent()->parent()->user_data()))->cb_Info_i(o,v);
}

ICCProfileUI::ICCProfileUI() {
  _profile = NULL;
  make_window();
}

ICCProfileUI::~ICCProfileUI() {
}

fltk::Window* ICCProfileUI::make_window() {
  fltk::Window* w;
   {fltk::Window* o = uiMain = new fltk::Window(650, 485);
    w = o;
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::PackedGroup* o = new fltk::PackedGroup(12, 14, 625, 471);
      o->begin();
       {fltk::Group* o = new fltk::Group(0, 0, 623, 161);
        o->begin();
         {fltk::Browser* o = uiTags = new fltk::Browser(0, 6, 623, 155, "Tags");
          o->callback((fltk::Callback*)cb_uiTags, (void*)(this));
          static const int widths[] = { -1, 120, 80,  80 };
          static const char* labels[] = { "ID", "Tag", "Offset", "Size", NULL };
          
          o->column_widths( widths );
          o->column_labels( labels );
        }
        o->end();
      }
       {fltk::Group* o = new fltk::Group(0, 166, 625, 295);
        o->begin();
         {fltk::WizardGroup* o = uiWizard = new fltk::WizardGroup(0, 0, 625, 295);
          o->begin();
          uiText = new fltk::TextDisplay(3, 5, 620, 285);
           {fltk::Group* o = new fltk::Group(3, 5, 620, 285);
            o->hide();
            o->begin();
            uiDrawing = new fltk::Widget(0, 0, 620, 285);
            o->end();
          }
          o->end();
          o->value(0);
        }
        o->end();
      }
      o->end();
      o->set_vertical();
    }
    o->end();
    o->resizable(o);
  }
  return  w;
}

void ICCProfileUI::replace( const std::string& name ) {
  _profile = mrv::colorProfile::get( name.c_str() );
  fill( name );
  uiMain->show();
}

void ICCProfileUI::fill( const std::string& name ) {
  uiMain->copy_label( name.c_str() );
  uiText->text("");
  uiTags->clear();
  
  if (!_profile) return;
  
  uiTags->add("Header");
  uiTags->value(0);
  
  CIccInfo Fmt;
  TagEntryList::iterator i = _profile->m_Tags->begin();
  TagEntryList::iterator e = _profile->m_Tags->end();
  char buf[256];
  char sig[64];
  for ( ; i != e; ++i ) 
  {
    sprintf( buf, "%s\t%s\t%8d\t%8d", 
             Fmt.GetTagSigName(i->TagInfo.sig),
             icGetSig(sig, i->TagInfo.sig, false), 
  	   i->TagInfo.offset, i->TagInfo.size);
    uiTags->add( strdup(buf) );
  }
  
  uiTags->redraw();
  
  fill_text();
}

void ICCProfileUI::fill_text() {
  uiText->text("");
  if (!_profile) return;
  
  int idx = uiTags->value();
  if ( idx < 0 ) return;
  
  if ( idx == 0 ) {
    uiText->text( mrv::colorProfile::header( _profile ).c_str() );
    return;
  }
  
  TagEntryList::iterator i = _profile->m_Tags->begin();
  std::advance( i, idx-1 );
  IccTagEntry& entry = *i;
  uiText->text( mrv::colorProfile::dump_tag( _profile, entry.TagInfo.sig ).c_str() );
  uiText->redraw();
}

fltk::Window* ICCProfileListUI::make_window() {
  fltk::Window* w;
   {fltk::Window* o = uiMain = new fltk::Window(630, 460, "ICC Profiles Inspector");
    w = o;
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::PackedGroup* o = new fltk::PackedGroup(0, 14, 625, 431);
      o->box(fltk::UP_BOX);
      o->begin();
       {fltk::Group* o = new fltk::Group(2, 0, 623, 381);
        o->begin();
         {fltk::Browser* o = uiProfiles = new fltk::Browser(8, 26, 605, 335, "ICC Profiles");
        }
        o->end();
      }
       {fltk::Group* o = new fltk::Group(10, 371, 605, 50);
        o->begin();
         {fltk::Button* o = new fltk::Button(480, 5, 110, 35, "Info");
          o->callback((fltk::Callback*)cb_Info, (void*)(this));
        }
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
  _info = new ICCProfileUI();
  return  w;
}

ICCProfileListUI::ICCProfileListUI( mrv::ViewerUI* main ) {
  uiMain = make_window();
  uiMain->child_of( (fltk::Window*)main->uiMain );
  _info->uiMain->child_of( uiMain );
  fill();
}

ICCProfileListUI::~ICCProfileListUI() {
  delete uiMain; uiMain = NULL;
}

void ICCProfileListUI::fill() {
  uiProfiles->clear();
  const stringArray& profiles = mrv::colorProfile::list();
  stringArray::const_iterator i = profiles.begin();
  stringArray::const_iterator e = profiles.end();
  for ( ; i != e; ++i )
    uiProfiles->add( (*i).c_str() );
  uiProfiles->redraw();
}

void ICCProfileListUI::show_info() {
  int idx = uiProfiles->value();
  if ( idx < 0 ) return;
  fltk::Widget* w = uiProfiles->child(idx);
  if (!w) return;
  const char* label = w->label();
  if (!label) return;
  _info->replace( label );
}
